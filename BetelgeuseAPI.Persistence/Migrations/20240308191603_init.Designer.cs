// <auto-generated />
using System;
using BetelgeuseAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetelgeuseAPI.Persistence.Migrations
{
    [DbContext(typeof(BetelgeuseAPIDbContext))]
    [Migration("20240308191603_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseChildSubTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseParentSubTopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseParentSubTopicId");

                    b.ToTable("CourseChildSubTopics");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseParentSubTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentTopic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseParentSubTopics");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseVideoSubTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseSubTopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Publish")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseSubTopicId");

                    b.ToTable("CourseVideoSubTopics");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseChildSubTopic", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.CourseParentSubTopic", "CourseParentSubTopic")
                        .WithMany("CourseSubTopics")
                        .HasForeignKey("CourseParentSubTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseParentSubTopic");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseVideoSubTopic", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.CourseChildSubTopic", "CourseSubTopic")
                        .WithMany("CourseVideoSubTopic")
                        .HasForeignKey("CourseSubTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSubTopic");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseChildSubTopic", b =>
                {
                    b.Navigation("CourseVideoSubTopic");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseParentSubTopic", b =>
                {
                    b.Navigation("CourseSubTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
