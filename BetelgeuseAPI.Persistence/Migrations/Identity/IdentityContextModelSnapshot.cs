// <auto-generated />
using System;
using BetelgeuseAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetelgeuseAPI.Persistence.Migrations.Identity
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "295935b1-f896-40bf-9f4d-ff0a7300a455",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "ed809cac-6827-4679-bbfd-38b3ab1818ec",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "f787d37e-2cc0-4f5a-b813-905ca225b413",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "f787d37e-2cc0-4f5a-b813-905ca225b413",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7608d0e8-2897-4f83-85f6-688afdc4b2e1",
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "STUDENT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "student@gmail.com"
                        },
                        new
                        {
                            Id = "ed809cac-6827-4679-bbfd-38b3ab1818ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e4f8457-67fe-44b6-a066-9c2df1665685",
                            Email = "moderator@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@GMAIL.COM",
                            NormalizedUserName = "MODERATOR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "moderator@gmail.com"
                        });
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshToken", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserAccountEducations", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountExperiences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Experiences")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserAccountExperiences", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<bool>("EmailNews")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("UserAccountInformation", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Common.MetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetaData", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.AllUserSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("boolean");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AllUserSkills", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.BlogVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogVisits", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Blogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogImageID")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MetaDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("BlogImageID");

                    b.HasIndex("MetaDataId");

                    b.ToTable("Blogs", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryID")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("Category", "Identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<bool>("PassAllParts")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InclusiveCourseId");

                    b.ToTable("CourseSections", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseSectionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionsId");

                    b.ToTable("CourseSource", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseQuizzesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseSectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseSourcesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuizzesId");

                    b.HasIndex("CourseSectionsId");

                    b.HasIndex("CourseSourcesId");

                    b.ToTable("CourseType", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseQuizId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuizId");

                    b.HasIndex("ImageId");

                    b.ToTable("CourseQuestions", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Attempts")
                        .HasColumnType("integer");

                    b.Property<bool>("Certificate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CourseSectionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExpiryDate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<bool>("LimitedQuestion")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PassingScore")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<bool>("RandomizeQuestion")
                        .HasColumnType("boolean");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionsId");

                    b.ToTable("CourseQuiz", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseQuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuestionId");

                    b.ToTable("CourseQuizAnswer", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.CourseBasicInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("CourseBasicInformation", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.CourseExtraInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCertificate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCourseForm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPartnered")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("PartnerId")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InclusiveCourseId")
                        .IsUnique();

                    b.HasIndex("PartnerId");

                    b.ToTable("CourseExtraInformation", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqLearningMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InclusiveCourseId");

                    b.ToTable("CourseFaqMaterial", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InclusiveCourseId");

                    b.ToTable("CourseFaq", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqRequirements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InclusiveCourseId");

                    b.ToTable("CourseFaqRequirements", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("CourseBasicInformationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoursePricingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MessageToReviewerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CourseBasicInformationId");

                    b.HasIndex("CoursePricingId");

                    b.HasIndex("MessageToReviewerId");

                    b.ToTable("Course", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.MessageToReviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Rules")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CourseMessageToReviewer", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Pricing.CoursePricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoursePricing", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Pricing.NewCoursePricingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CoursePricingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoursePricingId");

                    b.ToTable("CoursePricingNewPlan", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseSubLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseExtraInformationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseExtraInformationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CourseSubLanguage", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("File", "Identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("SeoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPrimary = true,
                            Name = "Türkçe",
                            Published = true,
                            SeoCode = "tr"
                        },
                        new
                        {
                            Id = 2,
                            IsPrimary = false,
                            Name = "İngilizce",
                            Published = true,
                            SeoCode = "en"
                        });
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.CourseFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseFavorite", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("InclusiveCourseId");

                    b.ToTable("Purchase", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItem", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.User.UserQuizInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseQuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseQuizAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseQuizId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuestionId");

                    b.HasIndex("CourseQuizAnswerId");

                    b.HasIndex("CourseQuizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizInteraction", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.User.UserSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AllUserSkillsId")
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AllUserSkillsId")
                        .IsUnique();

                    b.HasIndex("AppUserId");

                    b.ToTable("UserSkills", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.UserAccountAbout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("UserAccountInformationAbout", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            UserId = "ed809cac-6827-4679-bbfd-38b3ab1818ec",
                            RoleId = "ed809cac-6827-4679-bbfd-38b3ab1818ec"
                        },
                        new
                        {
                            UserId = "f787d37e-2cc0-4f5a-b813-905ca225b413",
                            RoleId = "f787d37e-2cc0-4f5a-b813-905ca225b413"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.BlogCategory", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.Category.Category");

                    b.HasDiscriminator().HasValue("BlogCategory");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.CourseCategory", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.Category.Category");

                    b.HasDiscriminator().HasValue("CourseCategory");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.EBookCategory", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.Category.Category");

                    b.HasDiscriminator().HasValue("EBookCategory");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseUpload", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.Property<Guid?>("CourseSourceId")
                        .HasColumnType("uuid");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CourseSourceId");

                    b.HasDiscriminator().HasValue("CourseUpload");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizUpload", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.Property<Guid?>("CourseQuestionsId")
                        .HasColumnType("uuid");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CourseQuestionsId");

                    b.HasDiscriminator().HasValue("CourseQuizUpload");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqUploadLogo", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.Property<Guid?>("InclusiveCourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasIndex("AppUserId");

                    b.HasIndex("InclusiveCourseId");

                    b.HasDiscriminator().HasValue("FaqUploadLogo");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.BlogImage", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("BlogImage");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.CourseCoverImage", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("CourseCoverImage");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.CourseThumbnail", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("CourseThumbnail");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.UserProfileBackgroundImage", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("UserProfileBackgroundImage");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.UserProfileImage", b =>
                {
                    b.HasBaseType("BetelgeuseAPI.Domain.Entities.File.File");

                    b.HasIndex("AppUserId");

                    b.HasDiscriminator().HasValue("UserProfileImage");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountEducation", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("UserAccountEducations")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountExperiences", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("UserAccountExperiences")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.UserAccountInformation", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithOne("UserAccountInformation")
                        .HasForeignKey("BetelgeuseAPI.Domain.Auth.UserAccountInformation", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.BlogVisit", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Blogs", "Blog")
                        .WithMany("BlogVisits")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Blogs", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Category.BlogCategory", "BlogCategory")
                        .WithMany()
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.File.BlogImage", "BlogImage")
                        .WithMany()
                        .HasForeignKey("BlogImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Common.MetaData", "MetaData")
                        .WithMany()
                        .HasForeignKey("MetaDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");

                    b.Navigation("BlogImage");

                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.Category", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Category.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", "InclusiveCourse")
                        .WithMany("Sections")
                        .HasForeignKey("InclusiveCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InclusiveCourse");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSource", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", "CourseSections")
                        .WithMany()
                        .HasForeignKey("CourseSectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseType", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", "CourseQuizzes")
                        .WithMany()
                        .HasForeignKey("CourseQuizzesId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", null)
                        .WithMany("CourseTypes")
                        .HasForeignKey("CourseSectionsId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSource", "CourseSources")
                        .WithMany()
                        .HasForeignKey("CourseSourcesId");

                    b.Navigation("CourseQuizzes");

                    b.Navigation("CourseSources");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", "CourseQuiz")
                        .WithMany("CourseQuestions")
                        .HasForeignKey("CourseQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizUpload", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("CourseQuiz");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", "CourseSections")
                        .WithMany()
                        .HasForeignKey("CourseSectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizAnswer", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", "CourseQuestion")
                        .WithMany("CourseQuizAnswers")
                        .HasForeignKey("CourseQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseQuestion");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.CourseBasicInformation", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.File.CourseCoverImage", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.File.CourseThumbnail", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverImage");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.CourseExtraInformation", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Category.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", "InclusiveCourse")
                        .WithOne("CourseExtraInformation")
                        .HasForeignKey("BetelgeuseAPI.Domain.Entities.Course.CourseExtraInformation", "InclusiveCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.Navigation("Category");

                    b.Navigation("InclusiveCourse");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqLearningMaterial", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", null)
                        .WithMany("FaqLearningMaterial")
                        .HasForeignKey("InclusiveCourseId");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqOption", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", null)
                        .WithMany("Faqs")
                        .HasForeignKey("InclusiveCourseId");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqRequirements", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", null)
                        .WithMany("FaqRequirements")
                        .HasForeignKey("InclusiveCourseId");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("InclusiveCourse")
                        .HasForeignKey("AppUserId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.CourseBasicInformation", "CourseBasicInformation")
                        .WithMany()
                        .HasForeignKey("CourseBasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Pricing.CoursePricing", "CoursePricing")
                        .WithMany()
                        .HasForeignKey("CoursePricingId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.MessageToReviewer", "MessageToReviewer")
                        .WithMany()
                        .HasForeignKey("MessageToReviewerId");

                    b.Navigation("AppUser");

                    b.Navigation("CourseBasicInformation");

                    b.Navigation("CoursePricing");

                    b.Navigation("MessageToReviewer");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Pricing.NewCoursePricingPlan", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Pricing.CoursePricing", "CoursePricing")
                        .WithMany("NewCoursePricingPlan")
                        .HasForeignKey("CoursePricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePricing");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.CourseSubLanguage", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.CourseExtraInformation", "CourseExtraInformation")
                        .WithMany("CourseSubLanguages")
                        .HasForeignKey("CourseExtraInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseExtraInformation");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.CourseFavorite", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.Purchase", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("Purchases")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", "InclusiveCourse")
                        .WithMany("Purchases")
                        .HasForeignKey("InclusiveCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("InclusiveCourse");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Purchase.ShoppingCartItem", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.User.UserQuizInteraction", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", "CourseQuestion")
                        .WithMany()
                        .HasForeignKey("CourseQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizAnswer", "CourseQuizAnswer")
                        .WithMany()
                        .HasForeignKey("CourseQuizAnswerId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", "CourseQuiz")
                        .WithMany()
                        .HasForeignKey("CourseQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseQuestion");

                    b.Navigation("CourseQuiz");

                    b.Navigation("CourseQuizAnswer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.User.UserSkills", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Entities.AllUserSkills", "AllUserSkills")
                        .WithOne("UserSkills")
                        .HasForeignKey("BetelgeuseAPI.Domain.Entities.User.UserSkills", "AllUserSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("UserSkills")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllUserSkills");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.UserAccountAbout", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithOne("UserAccountAbout")
                        .HasForeignKey("BetelgeuseAPI.Domain.Entities.UserAccountAbout", "AppUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseUpload", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSource", null)
                        .WithMany("CourseUpload")
                        .HasForeignKey("CourseSourceId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuizUpload", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", null)
                        .WithMany("Video")
                        .HasForeignKey("CourseQuestionsId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.FAQ.FaqUploadLogo", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", null)
                        .WithMany("FaqUploadLogo")
                        .HasForeignKey("InclusiveCourseId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.BlogImage", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.CourseCoverImage", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.CourseThumbnail", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.UserProfileBackgroundImage", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("UserProfileBackgroundImage")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.File.UserProfileImage", b =>
                {
                    b.HasOne("BetelgeuseAPI.Domain.Auth.AppUser", "AppUser")
                        .WithMany("UserProfileImage")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Auth.AppUser", b =>
                {
                    b.Navigation("InclusiveCourse");

                    b.Navigation("Purchases");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserAccountAbout")
                        .IsRequired();

                    b.Navigation("UserAccountEducations");

                    b.Navigation("UserAccountExperiences");

                    b.Navigation("UserAccountInformation")
                        .IsRequired();

                    b.Navigation("UserProfileBackgroundImage");

                    b.Navigation("UserProfileImage");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.AllUserSkills", b =>
                {
                    b.Navigation("UserSkills")
                        .IsRequired();
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Blogs", b =>
                {
                    b.Navigation("BlogVisits");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSections", b =>
                {
                    b.Navigation("CourseTypes");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.CourseSource", b =>
                {
                    b.Navigation("CourseUpload");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuestions", b =>
                {
                    b.Navigation("CourseQuizAnswers");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Content.Quiz.CourseQuiz", b =>
                {
                    b.Navigation("CourseQuestions");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.CourseExtraInformation", b =>
                {
                    b.Navigation("CourseSubLanguages");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.InclusiveCourse", b =>
                {
                    b.Navigation("CourseExtraInformation");

                    b.Navigation("FaqLearningMaterial");

                    b.Navigation("FaqRequirements");

                    b.Navigation("FaqUploadLogo");

                    b.Navigation("Faqs");

                    b.Navigation("Purchases");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("BetelgeuseAPI.Domain.Entities.Course.Pricing.CoursePricing", b =>
                {
                    b.Navigation("NewCoursePricingPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
